all_unconstrained = {...
'BQP1VAR', 'AKIVA', 'BEALE', 'BOXBODLS', 'BRKMCC', 'BROWNBS', ...
'CAMEL6', 'CKOEHELB', 'CLIFF', 'CUBE', 'DANWOODLS', 'DENSCHNA', ...
'DENSCHNB', 'DENSCHNC', 'DENSCHNF', 'DJTL', 'EXPFIT', 'FBRAINLS', ...
'GBRAINLS', 'HAIRY', 'HIMMELBB', 'HIMMELBG', 'HIMMELBH', 'HIMMELP1', ...
'HS1', 'HS2', 'HS3', 'HS3MOD', 'HS4', 'HS5', 'HUMPS', 'JENSMP', ...
'LOGHAIRY', 'LOGROS', 'MARATOSB', 'MDHOLE', 'MEXHAT', 'MISRA1ALS', ...
'MISRA1BLS', 'MISRA1CLS', 'MISRA1DLS', 'POWELLBSLS', 'ROSENBR', ...
'RSNBRNE', 'S308', 'SIM2BQP', 'SIMBQP', 'SINEVAL', 'SISSER', 'SNAIL', ...
'ZANGWIL2', 'BARD', 'BENNETT5LS', 'BOX2', 'BOX3', 'CHWIRUT1LS', ...
'CHWIRUT2LS', 'DENSCHND', 'DENSCHNE', 'ECKERLE4LS', 'EG1', 'ENGVAL2', ...
'GAUSSIAN', 'GROWTHLS', 'GULF', 'GULFNE', 'HATFLDD', 'HATFLDE', ...
'HELIX', 'HIELOW', 'HS25', 'KOEBHELB', 'LSC1LS', 'LSC2LS', 'MEYER3', ...
'MGH10LS', 'NELSONLS', 'PFIT1LS', 'PFIT2LS', 'PFIT3LS', 'PFIT4LS', ...
'RAT42LS', 'SSI', 'WEEDS', 'YFIT', 'YFITU', 'ALLINIT', 'ALLINITU', ...
'BROWNDEN', 'FBRAIN2LS', 'HATFLDA', 'HATFLDB', 'HIMMELBF', 'HS38', ...
'KOWOSB', 'MGH09LS', 'PALMER1', 'PALMER1B', 'PALMER2', 'PALMER2B', ...
'PALMER3', 'PALMER3B', 'PALMER4', 'PALMER4B', 'PALMER5D', 'PSPDOC', ...
'RAT43LS', 'ROSZMAN1LS', 'HS45', 'KIRBY2LS', 'MGH17LS', 'OSBORNEA', ...
'BIGGS3', 'BIGGS5', 'BIGGS6', 'FBRAIN3LS', 'HART6', 'HEART6LS', ...
'LANCZOS1LS', 'LANCZOS2LS', 'LANCZOS3LS', 'PALMER1A', 'PALMER2A', ...
'PALMER3A', 'PALMER4A', 'PALMER5C', 'PALMER6A', 'PALMER7A', ...
'PALMER8A', 'HAHN1LS', 'PALMER1D', 'THURBERLS', 'AIRCRFTB', ...
'GAUSS1LS', 'GAUSS2LS', 'GAUSS3LS', 'HEART8LS', 'MAXLIKA', 'OSLBQP', ...
'PALMER1C', 'PALMER1E', 'PALMER2C', 'PALMER2E', 'PALMER3C', ...
'PALMER3E', 'PALMER4C', 'PALMER4E', 'PALMER5A', 'PALMER5E', ...
'PALMER6C', 'PALMER6E', 'PALMER7C', 'PALMER7E', 'PALMER8C', ...
'PALMER8E', 'VIBRBEAM', 'VESUVIALS', 'VESUVIOLS', 'VESUVIOULS', ...
'ENSOLS', 'PALMER5B', 'STRATEC', 'OSBORNEB', 'PARKCH', 'BLEACHNG', ...
'SANTALS', 'HATFLDC', ...
};

n_problems = length(all_unconstrained);

directory = '/home/caio/docd/exchange/my_problems';

terminate_cutest_problem()
clear global problem_path_cutest problem_name_cutest problem_data_cutest
global problem_data_cutest

BIGM = 1e+19;

success = {};
for k = 1:n_problems
    problem_name = all_unconstrained{k};
    executable = fullfile(directory, problem_name, 'mcutest.mexa64');
    if exist(executable, 'file') > 0
        terminate_cutest_problem()
        prob = setup_cutest_problem(problem_name, directory);
        if ~isempty(prob.cl) && ~isempty(prob.cu)
           fprintf(1, 'N. constrained %s\n', problem_name);
        elseif sum(prob.bl > -BIGM) || sum(prob.bu < BIGM)
           fprintf(1, 'B. constrained %s\n', problem_name);
        else
            f_obj = @(x) get_cutest_objective(x);
            [~, ~, exitflag] = fminunc(f_obj, prob.x);
            if exitflag > 0
                success{end+1} = problem_name;
            else
                fprintf(1, 'OPT FAIL %s\n', problem_name);
            end
        end
        terminate_cutest_problem()
    else
        fprintf(1, 'ABSENT %s\n', problem_name);
    end
end