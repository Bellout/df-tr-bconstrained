fprintf(prob.fid, '%s\n', '/*********************************************************************');
fprintf(prob.fid, '%s\n', ' Copyright (C) 2018 Mathias Bellout <mathias.bellout@ntnu.no>');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', ' This file is part of the FieldOpt project.');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', ' FieldOpt is free software: you can redistribute it and/or modify');
fprintf(prob.fid, '%s\n', ' it under the terms of the GNU General Public License as published');
fprintf(prob.fid, '%s\n', ' by the Free Software Foundation, either version 3 of the License,');
fprintf(prob.fid, '%s\n', ' or (at your option) any later version.');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', ' FieldOpt is distributed in the hope that it will be useful,');
fprintf(prob.fid, '%s\n', ' but WITHOUT ANY WARRANTY; without even the implied warranty of');
fprintf(prob.fid, '%s\n', ' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the');
fprintf(prob.fid, '%s\n', ' GNU General Public License for more details.');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', ' You should have received a copy of the GNU General Public License');
fprintf(prob.fid, '%s\n', ' along with FieldOpt. If not, see <http://www.gnu.org/licenses/>.');
fprintf(prob.fid, '%s\n', '*********************************************************************/');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '#ifndef FIELDOPT_TEST_TR_DFO_DATA_H');
fprintf(prob.fid, '%s\n', '#define FIELDOPT_TEST_TR_DFO_DATA_H');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '#include <Eigen/Core>');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', 'namespace TestResources {');
fprintf(prob.fid, '%s\n', '    class TrustRegionModelData {');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '    public:');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '        struct prob {');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd xm; // tr_model.points_abs');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd fm; // tr_model.fvalues');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd sm; // tr_model.points_shifted');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd cm; // tr_model.tr_center');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd rm; // tr_model.radius');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd pcm; // tr_model.pivot_polynomials_coefficients');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd pdm; // tr_model.pivot_polynomials_dimensions');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd vm; // tr_model.pivot_values');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd mcm; // tr_model.modeling_coefficients');
fprintf(prob.fid, '%s\n', '            Eigen::MatrixXd mdm; // tr_model.modeling_dimensions');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '            vector<int> idx;; // ');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '        };');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '        // Trust region problems from C.Guliani');
fprintf(prob.fid, '%s\n', '        prob prob1;');
fprintf(prob.fid, '%s\n', '        prob prob2;');
fprintf(prob.fid, '%s\n', '        prob prob3;');
fprintf(prob.fid, '%s\n', '        prob prob4;');
fprintf(prob.fid, '%s\n', '        prob prob5;');
fprintf(prob.fid, '%s\n', '        prob prob6;');
fprintf(prob.fid, '%s\n', '        prob prob7;');
fprintf(prob.fid, '%s\n', '        prob prob8;');
fprintf(prob.fid, '%s\n', '        prob prob9;');
fprintf(prob.fid, '%s\n', '        prob prob10;');
fprintf(prob.fid, '%s\n', '');
fprintf(prob.fid, '%s\n', '        TrustRegionModelData() {');
fprintf(prob.fid, '%s\n', '');