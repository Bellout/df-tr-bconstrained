[ improveModelNfp() ]
shift_center   [    0.0000000000e+00,     0.0000000000e+00 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [    3.1472368639e-01,     4.0579193708e-01 ] 
points_shifted [   -9.9999999999e-01,    -6.9944050551e-15 ] 
points_shifted [   -2.9999999933e+00,    -1.9999988681e+00 ] 
tr_center_pt   [   -2.9999999933e+00,    -1.9999988681e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 1 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 5)

2 new pts/pivot-pts found (T/F:1)
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_shifted [   -6.9999998228e+00,     2.0000008096e+00 ] 
nfp_new_point_abs     [   -6.9999998228e+00,     2.0000008096e+00 ] 
nfp_new_pivots        [   -4.7582008781e+01 ] 

new_case -> impr_case
Return-for-loop[3]: issue return->iterate()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[ improveModelNfp() ]
shift_center   [    0.0000000000e+00,     0.0000000000e+00 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [    3.1472368639e-01,     4.0579193708e-01 ] 
points_shifted [   -9.9999999999e-01,    -6.9944050551e-15 ] 
points_shifted [   -2.9999999933e+00,    -1.9999988681e+00 ] 
tr_center_pt   [   -2.9999999933e+00,    -1.9999988681e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 1 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 5)

Using previously computed pts/pivot-vals
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_abs#0  [   -6.9999998228e+00,     2.0000008096e+00 ] 
nfp_new_fvalues#0    [   -8.9239905317e-01 ] 

c->GetState(): PEND
Setting -> setAreImprPointsComputed(false)

Break-for-loop[3]: (found_i < new_points_shifted.cols()) since f_succeeded.all()=1
End-for-loop[3]: (found_i < new_points_shifted.cols())

Break-if: (point_found)
Stop trying pivot polynomials for poly_i=(5)
End-for-loop[2]: (poly_i <= block_end)
Break-for-loop[1]: (attempts<=3)
End-for-loop[1]: (attempts<=3)
Setting -> setAreImprPointsComputed(false)
Update this polynomial in set
Swap polynomials

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        5
next_position:                 5
points_shifted_.cols():        4
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [    3.1472368639e-01,     4.0579193708e-01 ] 
points_shifted_#3:             [   -9.9999999999e-01,    -6.9944050551e-15 ] 
points_shifted_#4:             [   -2.9999999933e+00,    -1.9999988681e+00 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [   -6.9999998228e+00,     2.0000008096e+00 ] 
points_abs_.cols():            4
points_abs_.rows():            2
points_abs_#1:                 [    0.0000000000e+00,     0.0000000000e+00 ] 
points_abs_#2:                 [    3.1472368639e-01,     4.0579193708e-01 ] 
points_abs_#3:                 [   -9.9999999999e-01,    -6.9944050551e-15 ] 
points_abs_#4:                 [   -2.9999999933e+00,    -1.9999988681e+00 ] 
fvalues_.cols():               4
fvalues_.rows():               1
fvalues_#1:                    [    0.0000000000e+00 ] 
fvalues_#2:                    [    8.2040168883e-02 ] 
fvalues_#3:                    [   -2.5881904510e-01 ] 
fvalues_#4:                    [   -6.5328154143e-01 ] 
------------------------------------------

Add point
Normalize polynomial value
Re-orthogonalize
Orthogonalize polynomials on present block -- (deffering subsequent ones)
Update model and recompute polynomials
Resize points_abs_
Resize fvalues_

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        5
next_position:                 5
points_shifted_.cols():        5
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [    3.1472368639e-01,     4.0579193708e-01 ] 
points_shifted_#3:             [   -9.9999999999e-01,    -6.9944050551e-15 ] 
points_shifted_#4:             [   -2.9999999933e+00,    -1.9999988681e+00 ] 
points_shifted_#5:             [   -6.9999998228e+00,     2.0000008096e+00 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [   -6.9999998228e+00,     2.0000008096e+00 ] 
points_abs_.cols():            5
points_abs_.rows():            2
points_abs_#1:                 [    0.0000000000e+00,     0.0000000000e+00 ] 
points_abs_#2:                 [    3.1472368639e-01,     4.0579193708e-01 ] 
points_abs_#3:                 [   -9.9999999999e-01,    -6.9944050551e-15 ] 
points_abs_#4:                 [   -2.9999999933e+00,    -1.9999988681e+00 ] 
points_abs_#5:                 [   -6.9999998228e+00,     2.0000008096e+00 ] 
fvalues_.cols():               5
fvalues_.rows():               1
fvalues_#1:                    [    0.0000000000e+00 ] 
fvalues_#2:                    [    8.2040168883e-02 ] 
fvalues_#3:                    [   -2.5881904510e-01 ] 
fvalues_#4:                    [   -6.5328154143e-01 ] 
fvalues_#5:                    [   -8.9239905317e-01 ] 
------------------------------------------

exit_flag=1
=====================================


[ improveModelNfp() ]
shift_center   [   -6.0895347761e+00,     1.6365622029e-02 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
tr_center_pt   [    0.0000000000e+00,     0.0000000000e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 0 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 2)

2 new pts/pivot-pts found (T/F:1)
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_shifted [   -2.4407327486e-04,    -1.6940658945e-16 ] 
nfp_new_point_abs     [   -6.0897788494e+00,     1.6365622029e-02 ] 
nfp_new_pivots        [   -2.4407327486e-04 ] 

new_case -> impr_case
Return-for-loop[3]: issue return->iterate()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[ improveModelNfp() ]
shift_center   [   -6.0895347761e+00,     1.6365622029e-02 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
tr_center_pt   [    0.0000000000e+00,     0.0000000000e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 0 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 2)

Using previously computed pts/pivot-vals
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_abs#0  [   -6.0897788494e+00,     1.6365622029e-02 ] 
nfp_new_fvalues#0    [   -9.9971863110e-01 ] 

c->GetState(): PEND
Setting -> setAreImprPointsComputed(false)

Break-for-loop[3]: (found_i < new_points_shifted.cols()) since f_succeeded.all()=1
End-for-loop[3]: (found_i < new_points_shifted.cols())

Break-if: (point_found)
Stop trying pivot polynomials for poly_i=(2)
End-for-loop[2]: (poly_i <= block_end)
Break-for-loop[1]: (attempts<=3)
End-for-loop[1]: (attempts<=3)
Setting -> setAreImprPointsComputed(false)
Update this polynomial in set
Swap polynomials

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        2
next_position:                 2
points_shifted_.cols():        1
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [   -2.4407327486e-04,    -1.6940658945e-16 ] 
points_abs_.cols():            1
points_abs_.rows():            2
points_abs_#1:                 [   -6.0895347761e+00,     1.6365622029e-02 ] 
fvalues_.cols():               1
fvalues_.rows():               1
fvalues_#1:                    [   -9.9972013078e-01 ] 
------------------------------------------

Add point
Normalize polynomial value
Re-orthogonalize
Orthogonalize polynomials on present block -- (deffering subsequent ones)
Update model and recompute polynomials
Resize points_abs_
Resize fvalues_

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        2
next_position:                 2
points_shifted_.cols():        2
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [   -2.4407327486e-04,    -1.6940658945e-16 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [   -2.4407327486e-04,    -1.6940658945e-16 ] 
points_abs_.cols():            2
points_abs_.rows():            2
points_abs_#1:                 [   -6.0895347761e+00,     1.6365622029e-02 ] 
points_abs_#2:                 [   -6.0897788494e+00,     1.6365622029e-02 ] 
fvalues_.cols():               2
fvalues_.rows():               1
fvalues_#1:                    [   -9.9972013078e-01 ] 
fvalues_#2:                    [   -9.9971863110e-01 ] 
------------------------------------------

exit_flag=1
=====================================


[ improveModelNfp() ]
shift_center   [   -6.0895347761e+00,     1.6365622029e-02 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [   -2.4407327486e-04,    -1.6940658945e-16 ] 
tr_center_pt   [    0.0000000000e+00,     0.0000000000e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 0 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 3)

2 new pts/pivot-pts found (T/F:1)
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_shifted [    4.9215785527e-14,    -2.4407327486e-04 ] 
nfp_new_point_abs     [   -6.0895347761e+00,     1.6121548755e-02 ] 
nfp_new_pivots        [   -2.4407327486e-04 ] 

new_case -> impr_case
Return-for-loop[3]: issue return->iterate()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[ improveModelNfp() ]
shift_center   [   -6.0895347761e+00,     1.6365622029e-02 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [   -2.4407327486e-04,    -1.6940658945e-16 ] 
tr_center_pt   [    0.0000000000e+00,     0.0000000000e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 0 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 3)

Using previously computed pts/pivot-vals
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_abs#0  [   -6.0895347761e+00,     1.6121548755e-02 ] 
nfp_new_fvalues#0    [   -9.9972028359e-01 ] 

c->GetState(): PEND
Setting -> setAreImprPointsComputed(false)

Break-for-loop[3]: (found_i < new_points_shifted.cols()) since f_succeeded.all()=1
End-for-loop[3]: (found_i < new_points_shifted.cols())

Break-if: (point_found)
Stop trying pivot polynomials for poly_i=(3)
End-for-loop[2]: (poly_i <= block_end)
Break-for-loop[1]: (attempts<=3)
End-for-loop[1]: (attempts<=3)
Setting -> setAreImprPointsComputed(false)
Update this polynomial in set
Swap polynomials

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        3
next_position:                 3
points_shifted_.cols():        2
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [   -2.4407327486e-04,    -1.6940658945e-16 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [    4.9215785527e-14,    -2.4407327486e-04 ] 
points_abs_.cols():            2
points_abs_.rows():            2
points_abs_#1:                 [   -6.0895347761e+00,     1.6365622029e-02 ] 
points_abs_#2:                 [   -6.0897788494e+00,     1.6365622029e-02 ] 
fvalues_.cols():               2
fvalues_.rows():               1
fvalues_#1:                    [   -9.9972013078e-01 ] 
fvalues_#2:                    [   -9.9971863110e-01 ] 
------------------------------------------

Add point
Normalize polynomial value
Re-orthogonalize
Orthogonalize polynomials on present block -- (deffering subsequent ones)
Update model and recompute polynomials
Resize points_abs_
Resize fvalues_

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        3
next_position:                 3
points_shifted_.cols():        3
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [   -2.4407327486e-04,    -1.6940658945e-16 ] 
points_shifted_#3:             [    4.9215785527e-14,    -2.4407327486e-04 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [    4.9215785527e-14,    -2.4407327486e-04 ] 
points_abs_.cols():            3
points_abs_.rows():            2
points_abs_#1:                 [   -6.0895347761e+00,     1.6365622029e-02 ] 
points_abs_#2:                 [   -6.0897788494e+00,     1.6365622029e-02 ] 
points_abs_#3:                 [   -6.0895347761e+00,     1.6121548755e-02 ] 
fvalues_.cols():               3
fvalues_.rows():               1
fvalues_#1:                    [   -9.9972013078e-01 ] 
fvalues_#2:                    [   -9.9971863110e-01 ] 
fvalues_#3:                    [   -9.9972028359e-01 ] 
------------------------------------------

exit_flag=1
=====================================


[ improveModelNfp() ]
shift_center   [   -6.0888025567e+00,     1.5633402968e-02 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [   -4.8814621441e-04,     4.8814598405e-04 ] 
points_shifted [   -7.3221940645e-04,     4.8814578698e-04 ] 
points_shifted [    8.6451889793e-02,     2.3512595740e-03 ] 
points_shifted [    8.7945013114e-02,     1.0363867653e-02 ] 
tr_center_pt   [    8.6451889793e-02,     2.3512595740e-03 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 1 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 6)

2 new pts/pivot-pts found (T/F:1)
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_shifted [    2.1388754544e-01,    -1.2508520268e-01 ] 
nfp_new_point_abs     [   -5.8749150112e+00,    -1.0945179972e-01 ] 
nfp_new_pivots        [   -1.9560535135e-02 ] 

new_case -> impr_case
Return-for-loop[3]: issue return->iterate()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[ improveModelNfp() ]
shift_center   [   -6.0888025567e+00,     1.5633402968e-02 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [   -4.8814621441e-04,     4.8814598405e-04 ] 
points_shifted [   -7.3221940645e-04,     4.8814578698e-04 ] 
points_shifted [    8.6451889793e-02,     2.3512595740e-03 ] 
points_shifted [    8.7945013114e-02,     1.0363867653e-02 ] 
tr_center_pt   [    8.6451889793e-02,     2.3512595740e-03 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 1 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 6)

Using previously computed pts/pivot-vals
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_abs#0  [   -5.8749150112e+00,    -1.0945179972e-01 ] 
nfp_new_fvalues#0    [   -9.9923306445e-01 ] 

c->GetState(): PEND
Setting -> setAreImprPointsComputed(false)

Break-for-loop[3]: (found_i < new_points_shifted.cols()) since f_succeeded.all()=1
End-for-loop[3]: (found_i < new_points_shifted.cols())

Break-if: (point_found)
Stop trying pivot polynomials for poly_i=(6)
End-for-loop[2]: (poly_i <= block_end)
Break-for-loop[1]: (attempts<=3)
End-for-loop[1]: (attempts<=3)
Setting -> setAreImprPointsComputed(false)
Update this polynomial in set
Swap polynomials

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        6
next_position:                 6
points_shifted_.cols():        5
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [   -4.8814621441e-04,     4.8814598405e-04 ] 
points_shifted_#3:             [   -7.3221940645e-04,     4.8814578698e-04 ] 
points_shifted_#4:             [    8.6451889793e-02,     2.3512595740e-03 ] 
points_shifted_#5:             [    8.7945013114e-02,     1.0363867653e-02 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [    2.1388754544e-01,    -1.2508520268e-01 ] 
points_abs_.cols():            5
points_abs_.rows():            2
points_abs_#1:                 [   -6.0888025567e+00,     1.5633402968e-02 ] 
points_abs_#2:                 [   -6.0892907029e+00,     1.6121548952e-02 ] 
points_abs_#3:                 [   -6.0895347761e+00,     1.6121548755e-02 ] 
points_abs_#4:                 [   -6.0023506669e+00,     1.7984662542e-02 ] 
points_abs_#5:                 [   -6.0008575436e+00,     2.5997270620e-02 ] 
fvalues_.cols():               5
fvalues_.rows():               1
fvalues_#1:                    [   -9.9972505686e-01 ] 
fvalues_#2:                    [   -9.9972177919e-01 ] 
fvalues_#3:                    [   -9.9972028359e-01 ] 
fvalues_#4:                    [   -9.9999357568e-01 ] 
fvalues_#5:                    [   -9.9998694660e-01 ] 
------------------------------------------

Add point
Normalize polynomial value
Re-orthogonalize
Orthogonalize polynomials on present block -- (deffering subsequent ones)
Update model and recompute polynomials
Resize points_abs_
Resize fvalues_

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        6
next_position:                 6
points_shifted_.cols():        6
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [   -4.8814621441e-04,     4.8814598405e-04 ] 
points_shifted_#3:             [   -7.3221940645e-04,     4.8814578698e-04 ] 
points_shifted_#4:             [    8.6451889793e-02,     2.3512595740e-03 ] 
points_shifted_#5:             [    8.7945013114e-02,     1.0363867653e-02 ] 
points_shifted_#6:             [    2.1388754544e-01,    -1.2508520268e-01 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [    2.1388754544e-01,    -1.2508520268e-01 ] 
points_abs_.cols():            6
points_abs_.rows():            2
points_abs_#1:                 [   -6.0888025567e+00,     1.5633402968e-02 ] 
points_abs_#2:                 [   -6.0892907029e+00,     1.6121548952e-02 ] 
points_abs_#3:                 [   -6.0895347761e+00,     1.6121548755e-02 ] 
points_abs_#4:                 [   -6.0023506669e+00,     1.7984662542e-02 ] 
points_abs_#5:                 [   -6.0008575436e+00,     2.5997270620e-02 ] 
points_abs_#6:                 [   -5.8749150112e+00,    -1.0945179972e-01 ] 
fvalues_.cols():               6
fvalues_.rows():               1
fvalues_#1:                    [   -9.9972505686e-01 ] 
fvalues_#2:                    [   -9.9972177919e-01 ] 
fvalues_#3:                    [   -9.9972028359e-01 ] 
fvalues_#4:                    [   -9.9999357568e-01 ] 
fvalues_#5:                    [   -9.9998694660e-01 ] 
fvalues_#6:                    [   -9.9923306445e-01 ] 
------------------------------------------

exit_flag=1
=====================================


[ improveModelNfp() ]
shift_center   [   -5.9999903941e+00,     1.1728531723e-06 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [   -2.3602727834e-03,     1.7983489688e-02 ] 
points_shifted [   -3.0725733848e-02,     2.1039764769e-02 ] 
points_shifted [   -8.6714946214e-04,     2.5996097767e-02 ] 
points_shifted [    1.4624938518e-03,    -3.7722161884e-02 ] 
tr_center_pt   [    0.0000000000e+00,     0.0000000000e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 1 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 6)

2 new pts/pivot-pts found (T/F:1)
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_shifted [   -1.4122381667e-03,    -1.4062576463e-03 ] 
nfp_new_point_abs     [   -6.0014026323e+00,    -1.4050847931e-03 ] 
nfp_new_pivots        [   -7.5894605130e-04 ] 

new_case -> impr_case
Return-for-loop[3]: issue return->iterate()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[ improveModelNfp() ]
shift_center   [   -5.9999903941e+00,     1.1728531723e-06 ] 
bl_shifted     [                -Inf,                 -Inf ] 
bu_shifted     [                 Inf,                  Inf ] 
points_shifted [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted [   -2.3602727834e-03,     1.7983489688e-02 ] 
points_shifted [   -3.0725733848e-02,     2.1039764769e-02 ] 
points_shifted [   -8.6714946214e-04,     2.5996097767e-02 ] 
points_shifted [    1.4624938518e-03,    -3.7722161884e-02 ] 
tr_center_pt   [    0.0000000000e+00,     0.0000000000e+00 ] 

A: (tr_center_pt.lpNorm<Inf>() > radius_fac*radius) [ 0 ]
B: (p_ini > dim+1)                                  [ 1 ]

Model is not old
Model is not complete, i.e., not yet fully linear (p_ini < dim+1)=(1)
For-loop[1]: (attempts<=3) Try smaller radius:  1/3
For-loop[2]: (poly_i <= block_end) Iter through avail. polyn. (poly_i= 6)

Using previously computed pts/pivot-vals
For-loop[3]: (found_i < nfp_new_points_shifted_.cols()) (1/2)
nfp_new_point_abs#0  [   -6.0014026323e+00,    -1.4050847931e-03 ] 
nfp_new_fvalues#0    [   -9.9999989452e-01 ] 

c->GetState(): PEND
Setting -> setAreImprPointsComputed(false)

Break-for-loop[3]: (found_i < new_points_shifted.cols()) since f_succeeded.all()=1
End-for-loop[3]: (found_i < new_points_shifted.cols())

Break-if: (point_found)
Stop trying pivot polynomials for poly_i=(6)
End-for-loop[2]: (poly_i <= block_end)
Break-for-loop[1]: (attempts<=3)
End-for-loop[1]: (attempts<=3)
Setting -> setAreImprPointsComputed(false)
Update this polynomial in set
Swap polynomials

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        6
next_position:                 6
points_shifted_.cols():        5
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [   -2.3602727834e-03,     1.7983489688e-02 ] 
points_shifted_#3:             [   -3.0725733848e-02,     2.1039764769e-02 ] 
points_shifted_#4:             [   -8.6714946214e-04,     2.5996097767e-02 ] 
points_shifted_#5:             [    1.4624938518e-03,    -3.7722161884e-02 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [   -1.4122381667e-03,    -1.4062576463e-03 ] 
points_abs_.cols():            5
points_abs_.rows():            2
points_abs_#1:                 [   -5.9999903941e+00,     1.1728531723e-06 ] 
points_abs_#2:                 [   -6.0023506669e+00,     1.7984662542e-02 ] 
points_abs_#3:                 [   -6.0307161279e+00,     2.1040937622e-02 ] 
points_abs_#4:                 [   -6.0008575436e+00,     2.5997270620e-02 ] 
points_abs_#5:                 [   -5.9985279002e+00,    -3.7720989031e-02 ] 
fvalues_.cols():               5
fvalues_.rows():               1
fvalues_#1:                    [   -1.0000000000e+00 ] 
fvalues_#2:                    [   -9.9999357568e-01 ] 
fvalues_#3:                    [   -9.9995913375e-01 ] 
fvalues_#4:                    [   -9.9998694660e-01 ] 
fvalues_#5:                    [   -9.9997249775e-01 ] 
------------------------------------------

Add point
Normalize polynomial value
Re-orthogonalize
Orthogonalize polynomials on present block -- (deffering subsequent ones)
Update model and recompute polynomials
Resize points_abs_
Resize fvalues_

------------------------------------------
If: (nfp_point_found_ && f_succeeded.all()
pivot_polynomials_.sz():       6
poly_i:                        6
next_position:                 6
points_shifted_.cols():        6
points_shifted_.rows():        2
points_shifted_#1:             [    0.0000000000e+00,     0.0000000000e+00 ] 
points_shifted_#2:             [   -2.3602727834e-03,     1.7983489688e-02 ] 
points_shifted_#3:             [   -3.0725733848e-02,     2.1039764769e-02 ] 
points_shifted_#4:             [   -8.6714946214e-04,     2.5996097767e-02 ] 
points_shifted_#5:             [    1.4624938518e-03,    -3.7722161884e-02 ] 
points_shifted_#6:             [   -1.4122381667e-03,    -1.4062576463e-03 ] 
nfp_new_point_shifted_.cols(): 1
nfp_new_point_shifted_.rows(): 2
nfp_new_point_shifted_#1       [   -1.4122381667e-03,    -1.4062576463e-03 ] 
points_abs_.cols():            6
points_abs_.rows():            2
points_abs_#1:                 [   -5.9999903941e+00,     1.1728531723e-06 ] 
points_abs_#2:                 [   -6.0023506669e+00,     1.7984662542e-02 ] 
points_abs_#3:                 [   -6.0307161279e+00,     2.1040937622e-02 ] 
points_abs_#4:                 [   -6.0008575436e+00,     2.5997270620e-02 ] 
points_abs_#5:                 [   -5.9985279002e+00,    -3.7720989031e-02 ] 
points_abs_#6:                 [   -6.0014026323e+00,    -1.4050847931e-03 ] 
fvalues_.cols():               6
fvalues_.rows():               1
fvalues_#1:                    [   -1.0000000000e+00 ] 
fvalues_#2:                    [   -9.9999357568e-01 ] 
fvalues_#3:                    [   -9.9995913375e-01 ] 
fvalues_#4:                    [   -9.9998694660e-01 ] 
fvalues_#5:                    [   -9.9997249775e-01 ] 
fvalues_#6:                    [   -9.9999989452e-01 ] 
------------------------------------------

exit_flag=1
=====================================


